//
// DefaultAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class DefaultAPI {

    /**
     Получение списка персонажей
     
     - parameter page: (query) Номер страницы для пагинации (по умолчанию 1). (optional)
     - parameter name: (query) Фильтровать персонажей по имени. (optional)
     - parameter status: (query) Фильтровать персонажей по статусу (например, \&quot;alive\&quot;, \&quot;dead\&quot;, \&quot;unknown\&quot;). (optional)
     - parameter species: (query) Фильтровать персонажей по виду (например, \&quot;Human\&quot;, \&quot;Alien\&quot;). (optional)
     - parameter gender: (query) Фильтровать персонажей по полу (например, \&quot;Male\&quot;, \&quot;Female\&quot;, \&quot;Genderless\&quot;, \&quot;Unknown\&quot;). (optional)
     - returns: CharacterGet200Response
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func characterGet(page: Int? = nil, name: String? = nil, status: String? = nil, species: String? = nil, gender: String? = nil) async throws -> CharacterGet200Response {
        return try await characterGetWithRequestBuilder(page: page, name: name, status: status, species: species, gender: gender).execute().body
    }

    /**
     Получение списка персонажей
     - GET /character
     - Возвращает список персонажей из сериала \"Rick and Morty\".
     - parameter page: (query) Номер страницы для пагинации (по умолчанию 1). (optional)
     - parameter name: (query) Фильтровать персонажей по имени. (optional)
     - parameter status: (query) Фильтровать персонажей по статусу (например, \&quot;alive\&quot;, \&quot;dead\&quot;, \&quot;unknown\&quot;). (optional)
     - parameter species: (query) Фильтровать персонажей по виду (например, \&quot;Human\&quot;, \&quot;Alien\&quot;). (optional)
     - parameter gender: (query) Фильтровать персонажей по полу (например, \&quot;Male\&quot;, \&quot;Female\&quot;, \&quot;Genderless\&quot;, \&quot;Unknown\&quot;). (optional)
     - returns: RequestBuilder<CharacterGet200Response> 
     */
    open class func characterGetWithRequestBuilder(page: Int? = nil, name: String? = nil, status: String? = nil, species: String? = nil, gender: String? = nil) -> RequestBuilder<CharacterGet200Response> {
        let localVariablePath = "/character"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "page": (wrappedValue: page?.encodeToJSON(), isExplode: true),
            "name": (wrappedValue: name?.encodeToJSON(), isExplode: true),
            "status": (wrappedValue: status?.encodeToJSON(), isExplode: true),
            "species": (wrappedValue: species?.encodeToJSON(), isExplode: true),
            "gender": (wrappedValue: gender?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CharacterGet200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }
}
