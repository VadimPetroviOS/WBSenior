//
// TeamsGet200ResponseInner.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct TeamsGet200ResponseInner: Codable, JSONEncodable, Hashable {

    /** Идентификатор команды. */
    public var teamId: Int?
    /** Рейтинг команды. */
    public var rating: Double?
    /** Количество побед команды. */
    public var wins: Int?
    /** Количество поражений команды. */
    public var losses: Int?
    /** Время последнего матча (в формате UNIX timestamp). */
    public var lastMatchTime: Int?
    /** Название команды. */
    public var name: String?
    /** Тег команды. */
    public var tag: String?
    /** URL логотипа команды. */
    public var logoUrl: String?

    public init(teamId: Int? = nil, rating: Double? = nil, wins: Int? = nil, losses: Int? = nil, lastMatchTime: Int? = nil, name: String? = nil, tag: String? = nil, logoUrl: String? = nil) {
        self.teamId = teamId
        self.rating = rating
        self.wins = wins
        self.losses = losses
        self.lastMatchTime = lastMatchTime
        self.name = name
        self.tag = tag
        self.logoUrl = logoUrl
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case teamId = "team_id"
        case rating
        case wins
        case losses
        case lastMatchTime = "last_match_time"
        case name
        case tag
        case logoUrl = "logo_url"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(teamId, forKey: .teamId)
        try container.encodeIfPresent(rating, forKey: .rating)
        try container.encodeIfPresent(wins, forKey: .wins)
        try container.encodeIfPresent(losses, forKey: .losses)
        try container.encodeIfPresent(lastMatchTime, forKey: .lastMatchTime)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(tag, forKey: .tag)
        try container.encodeIfPresent(logoUrl, forKey: .logoUrl)
    }
}

